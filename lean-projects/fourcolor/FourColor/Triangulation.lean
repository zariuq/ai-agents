import Mathlib

open scoped BigOperators
open Classical

noncomputable section

namespace FourColor

/-- Scalar field `ùîΩ‚ÇÇ`. -/
abbrev F2 := ZMod 2

/-- The color group `G = F‚ÇÇ √ó F‚ÇÇ` used to encode edge colors. -/
abbrev Color :=
  F2 √ó F2

/-
Auxiliary algebra for Lemma‚ÄØ4.5.

We gather the small ‚Äúzero chain‚Äù facts, support lemmas, and finite-sum
rewrite rules in one place so the facial-basis proof can cite them without
repeating the underlying `simp` gymnastics.
-/
@[simp] lemma zmod2_add_self (x : ZMod 2) : x + x = 0 := by
  classical
  fin_cases x <;> decide

/-- In F‚ÇÇ√óF‚ÇÇ, every color added to itself gives zero (self-inverse property). -/
@[simp] lemma color_add_self (c : Color) : c + c = (0,0) := by
  ext <;> simp [zmod2_add_self]

/-- The constant zero chain. -/
def zeroChain {E : Type*} [DecidableEq E] : E ‚Üí Color := fun _ => (0,0)

@[simp] lemma zeroChain_eq_zero {E : Type*} [DecidableEq E] :
    zeroChain = (0 : E ‚Üí Color) := rfl

/-- Support of a chain: the set of edges where the colour is non-zero. -/
def support {E : Type*} [Fintype E] [DecidableEq E] (x : E ‚Üí Color) : Finset E :=
  (Finset.univ.filter fun e => x e ‚â† (0,0))

lemma mem_support_iff {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} {e : E} :
    e ‚àà support x ‚Üî x e ‚â† (0,0) := by
  classical
  unfold support
  simp

lemma support_zeroChain {E : Type*} [Fintype E] [DecidableEq E] :
    support (zeroChain (E := E)) = ‚àÖ := by
  classical
  ext e; simp [support, zeroChain]

lemma support_eq_empty_iff {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} :
    support x = ‚àÖ ‚Üî ‚àÄ e, x e = (0,0) := by
  classical
  constructor
  ¬∑ intro h e
    have : e ‚àâ support x := by simpa [h]
    simpa [support] using this
  ¬∑ intro h
    ext e; simp [support, h e]

lemma eq_zero_of_support_eq_empty {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} (h : support x = ‚àÖ) :
    x = zeroChain (E := E) := by
  classical
  funext e
  simpa [zeroChain] using (support_eq_empty_iff.mp h e)

/-- Œ≥-coordinate support: edges where the first coordinate (Œ≥ = (1,0) projection) is nonzero.
This is used in the leaf-peel induction to avoid circular dependencies. -/
def support‚ÇÅ {E : Type*} [Fintype E] [DecidableEq E] (x : E ‚Üí Color) : Finset E :=
  (Finset.univ.filter fun e => (x e).fst ‚â† 0)

@[simp] lemma mem_support‚ÇÅ {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} {e : E} :
    e ‚àà support‚ÇÅ x ‚Üî (x e).fst ‚â† 0 := by
  classical
  unfold support‚ÇÅ; simp

lemma support‚ÇÅ_zeroChain {E : Type*} [Fintype E] [DecidableEq E] :
    support‚ÇÅ (zeroChain (E := E)) = ‚àÖ := by
  classical
  ext e; simp [support‚ÇÅ, zeroChain]

lemma support‚ÇÅ_eq_empty_iff {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} :
    support‚ÇÅ x = ‚àÖ ‚Üî ‚àÄ e, (x e).fst = 0 := by
  classical
  constructor
  ¬∑ intro h e
    have : e ‚àâ support‚ÇÅ x := by simpa [h]
    simpa [support‚ÇÅ] using this
  ¬∑ intro h
    ext e; simp [support‚ÇÅ, h e]

/-- Œ≥‚ÇÇ-coordinate support: edges where the second coordinate (Œ≥ = (0,1) projection) is nonzero. -/
def support‚ÇÇ {E : Type*} [Fintype E] [DecidableEq E] (x : E ‚Üí Color) : Finset E :=
  (Finset.univ.filter fun e => (x e).snd ‚â† 0)

@[simp] lemma mem_support‚ÇÇ {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} {e : E} :
    e ‚àà support‚ÇÇ x ‚Üî (x e).snd ‚â† 0 := by
  classical
  unfold support‚ÇÇ; simp

lemma support‚ÇÇ_zeroChain {E : Type*} [Fintype E] [DecidableEq E] :
    support‚ÇÇ (zeroChain (E := E)) = ‚àÖ := by
  classical
  ext e; simp [support‚ÇÇ, zeroChain]

lemma support‚ÇÇ_eq_empty_iff {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} :
    support‚ÇÇ x = ‚àÖ ‚Üî ‚àÄ e, (x e).snd = 0 := by
  classical
  constructor
  ¬∑ intro h e
    have : e ‚àâ support‚ÇÇ x := by simpa [h]
    simpa [support‚ÇÇ] using this
  ¬∑ intro h
    ext e; simp [support‚ÇÇ, h e]

namespace Color

variable (u v : Color)

/-- Dot product on `G = F‚ÇÇ √ó F‚ÇÇ`, taken coordinatewise and summed in `F‚ÇÇ`. -/
def dot (u v : Color) : ZMod 2 :=
  u.1 * v.1 + u.2 * v.2

instance instOfNatColorZero : OfNat Color 0 where
  ofNat := (0, 0)

lemma zero_eq_pair : (0 : Color) = (0, 0) := rfl

@[simp] lemma dot_mk (u‚ÇÅ u‚ÇÇ v‚ÇÅ v‚ÇÇ : ZMod 2) :
    dot (u := (u‚ÇÅ, u‚ÇÇ)) (v := (v‚ÇÅ, v‚ÇÇ)) = u‚ÇÅ * v‚ÇÅ + u‚ÇÇ * v‚ÇÇ :=
  rfl

@[simp] lemma dot_zero_right (u : Color) : dot u ((0, 0) : Color) = 0 := by
  rcases u with ‚ü®u‚ÇÅ, u‚ÇÇ‚ü©
  simp [dot]

@[simp] lemma dot_zero_right' (u : Color) : dot u (0 : Color) = 0 := by
  rcases u with ‚ü®u‚ÇÅ, u‚ÇÇ‚ü©
  simp [dot]

@[simp] lemma dot_zero_left (v : Color) : dot ((0, 0) : Color) v = 0 := by
  rcases v with ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
  simp [dot]

@[simp] lemma dot_comm (u v : Color) : dot u v = dot v u := by
  cases u with
  | mk u‚ÇÅ u‚ÇÇ =>
    cases v with
    | mk v‚ÇÅ v‚ÇÇ =>
      change u‚ÇÅ * v‚ÇÅ + u‚ÇÇ * v‚ÇÇ = v‚ÇÅ * u‚ÇÅ + v‚ÇÇ * u‚ÇÇ
      simp [mul_comm]

@[simp] lemma dot_add_right (u v w : Color) : dot u (v + w) = dot u v + dot u w := by
  rcases u with ‚ü®u‚ÇÅ, u‚ÇÇ‚ü©
  rcases v with ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
  rcases w with ‚ü®w‚ÇÅ, w‚ÇÇ‚ü©
  simp [dot, mul_add, add_comm, add_left_comm, add_assoc]

@[simp] lemma dot_add_left (u v w : Color) : dot (u + v) w = dot u w + dot v w := by
  rcases u with ‚ü®u‚ÇÅ, u‚ÇÇ‚ü©
  rcases v with ‚ü®v‚ÇÅ, v‚ÇÇ‚ü©
  rcases w with ‚ü®w‚ÇÅ, w‚ÇÇ‚ü©
  simp [dot, add_mul, add_comm, add_left_comm, add_assoc]

variable {u}

/-- Lemma 4.1(a): for any non-zero color `u`, there exists `v` with `dot u v = 1`. -/
lemma exists_dot_one_of_ne_zero (u : Color) (h : u ‚â† 0) :
    ‚àÉ v : Color, dot u v = 1 := by
  classical
  rcases u with ‚ü®u‚ÇÅ, u‚ÇÇ‚ü©
  have hcoords : u‚ÇÅ ‚â† 0 ‚à® u‚ÇÇ ‚â† 0 := by
    by_contra hnot
    push_neg at hnot
    rcases hnot with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    have : (u‚ÇÅ, u‚ÇÇ) = ((0, 0) : Color) := by simpa [h‚ÇÅ, h‚ÇÇ]
    exact h this
  cases hcoords with
  | inl h‚ÇÅ =>
      refine ‚ü®(u‚ÇÅ‚Åª¬π, 0), ?_‚ü©
      have h‚ÇÅ' : u‚ÇÅ ‚â† 0 := h‚ÇÅ
      simp [dot, h‚ÇÅ']
  | inr h‚ÇÇ =>
      refine ‚ü®(0, u‚ÇÇ‚Åª¬π), ?_‚ü©
      have h‚ÇÇ' : u‚ÇÇ ‚â† 0 := h‚ÇÇ
      simp [dot, h‚ÇÇ']

/-- Chains are functions from edges to colors. -/
abbrev Chain (Œπ : Type*) := Œπ ‚Üí Color

/-- Dot product aggregated over all edges (Definition 4.1). -/
def chainDot {Œπ : Type*} [Fintype Œπ] (y z : Chain Œπ) : F2 :=
  ‚àë e : Œπ, dot (y e) (z e)

@[simp] lemma chainDot_zero_right {Œπ : Type*} [Fintype Œπ]
    (y : Chain Œπ) : chainDot y (fun _ => 0) = 0 := by
  classical
  unfold chainDot
  refine Finset.sum_eq_zero ?_
  intro e _
  simp [dot]

@[simp] lemma chainDot_add_right {Œπ : Type*} [Fintype Œπ]
    (y x z : Chain Œπ) : chainDot y (x + z) = chainDot y x + chainDot y z := by
  classical
  unfold chainDot
  simpa [dot_add_right, Finset.sum_add_distrib]

@[simp] lemma chainDot_add_left {Œπ : Type*} [Fintype Œπ]
    (y x z : Chain Œπ) : chainDot (y + x) z = chainDot y z + chainDot x z := by
  classical
  unfold chainDot
  simpa [dot_add_left, Finset.sum_add_distrib]

/-- Lemma 4.1(b): a non-zero chain admits a witness with dot `1`. -/
lemma exists_chain_dot_one {Œπ : Type*} [Fintype Œπ]
    {y : Chain Œπ} (hy : ‚àÉ e, y e ‚â† 0) :
    ‚àÉ z : Chain Œπ, chainDot y z = 1 := by
  classical
  obtain ‚ü®e‚ÇÄ, he‚ÇÄ‚ü© := hy
  obtain ‚ü®w, hw‚ü© := exists_dot_one_of_ne_zero (u := y e‚ÇÄ) he‚ÇÄ
  let z : Chain Œπ := fun e => if e = e‚ÇÄ then w else 0
  have hsum :
      chainDot y z = dot (y e‚ÇÄ) w := by
    classical
    unfold chainDot
    have hrewrite :
        ‚àë e : Œπ, dot (y e) (z e) =
          ‚àë e : Œπ, (if e = e‚ÇÄ then dot (y e) w else 0) := by
      refine Finset.sum_congr rfl ?_
      intro e _
      by_cases h : e = e‚ÇÄ
      ¬∑ subst h; simp [z]
      ¬∑ simp [z, h, dot_zero_right']
    have hcalc :
        ‚àë e : Œπ, (if e = e‚ÇÄ then dot (y e) w else 0)
          = dot (y e‚ÇÄ) w := by
      classical
      simpa using
        Finset.sum_ite (s := (Finset.univ : Finset Œπ)) (p := fun e => e = e‚ÇÄ)
          (f := fun e => dot (y e) w) (g := fun _ => (0 : F2))
    exact (hrewrite.trans hcalc)
  refine ‚ü®z, ?_‚ü©
  simpa [hsum] using hw

/-- Swap two distinguished colors, leaving any other color unchanged. -/
def swap (Œ± Œ≤ x : Color) : Color :=
  if x = Œ± then Œ≤ else if x = Œ≤ then Œ± else x

@[simp] lemma swap_eq_left (Œ± Œ≤ : Color) : swap Œ± Œ≤ Œ± = Œ≤ := by
  simp [swap]

@[simp] lemma swap_eq_right (Œ± Œ≤ : Color) : swap Œ± Œ≤ Œ≤ = Œ± := by
  simp [swap]

@[simp] lemma swap_ne (Œ± Œ≤ x : Color) (hŒ± : x ‚â† Œ±) (hŒ≤ : x ‚â† Œ≤) :
    swap Œ± Œ≤ x = x := by
  simp [swap, hŒ±, hŒ≤]

end Color

/-- Convenient shorthand for the two-element set `{Œ±, Œ≤}`. -/
def twoColor (Œ± Œ≤ : Color) : Set Color :=
  {c | c = Œ± ‚à® c = Œ≤}

namespace Color

@[simp] lemma swap_mem_twoColor_iff (Œ± Œ≤ x : Color) :
    swap Œ± Œ≤ x ‚àà twoColor Œ± Œ≤ ‚Üî x ‚àà twoColor Œ± Œ≤ := by
  classical
  unfold twoColor
  by_cases hŒ± : x = Œ±
  ¬∑ subst hŒ±
    simp [swap]
  ¬∑ by_cases hŒ≤ : x = Œ≤
    ¬∑ subst hŒ≤
      simp [swap]
    ¬∑ simp [swap, hŒ±, hŒ≤]

end Color

/-- Apply a Kempe switch that toggles colors `Œ±` and `Œ≤` on the edge set `D`. -/
def switch {Œπ : Type*} (Œ± Œ≤ : Color) (D : Set Œπ) (C : Œπ ‚Üí Color) :
    Œπ ‚Üí Color :=
  fun e => if e ‚àà D then Color.swap Œ± Œ≤ (C e) else C e

@[simp] lemma switch_of_not_mem {Œπ : Type*} (Œ± Œ≤ : Color) (D : Set Œπ)
    (C : Œπ ‚Üí Color) {e : Œπ} (he : e ‚àâ D) :
    switch Œ± Œ≤ D C e = C e := by
  simpa [switch, he]

@[simp] lemma switch_of_mem {Œπ : Type*} (Œ± Œ≤ : Color) (D : Set Œπ)
    (C : Œπ ‚Üí Color) {e : Œπ} (he : e ‚àà D) :
    switch Œ± Œ≤ D C e = Color.swap Œ± Œ≤ (C e) := by
  simpa [switch, he]

lemma switch_mem_twoColor_iff {Œπ : Type*} (Œ± Œ≤ : Color) (D : Set Œπ)
    (C : Œπ ‚Üí Color) (e : Œπ) :
    switch Œ± Œ≤ D C e ‚àà twoColor Œ± Œ≤ ‚Üî C e ‚àà twoColor Œ± Œ≤ := by
  classical
  by_cases he : e ‚àà D
  ¬∑ simp [switch_of_mem, he, Color.swap_mem_twoColor_iff]
  ¬∑ simp [switch_of_not_mem, he]

def twoColorSupport {Œπ : Type*} (C : Œπ ‚Üí Color) (Œ± Œ≤ : Color) : Set Œπ :=
  {e | C e ‚àà twoColor Œ± Œ≤}

/-- **Lemma 4.2 (Run invariance under cycle switches).**
Swapping colors `Œ±` and `Œ≤` along a Kempe cycle leaves the `Œ±Œ≤` support
unchanged, and hence the maximal runs on any boundary are preserved. -/
lemma twoColorSupport_switch {Œπ : Type*} (Œ± Œ≤ : Color) (D : Set Œπ)
    (C : Œπ ‚Üí Color) :
    twoColorSupport (switch Œ± Œ≤ D C) Œ± Œ≤ =
      twoColorSupport C Œ± Œ≤ := by
  classical
  ext e
  simpa [twoColorSupport] using
    (switch_mem_twoColor_iff (Œ± := Œ±) (Œ≤ := Œ≤) (D := D) (C := C) e)

/-- Chain indicating membership in a finite set, coloured by `Œ≥`. -/
def indicatorChain {Œπ : Type*} [DecidableEq Œπ] (Œ≥ : Color) (S : Finset Œπ) :
    Œπ ‚Üí Color :=
  fun e => if e ‚àà S then Œ≥ else 0

@[simp] lemma indicatorChain_of_mem {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) {S : Finset Œπ} {e : Œπ} (he : e ‚àà S) :
    indicatorChain Œ≥ S e = Œ≥ := by
  classical
  simp [indicatorChain, he]

@[simp] lemma indicatorChain_of_not_mem {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) {S : Finset Œπ} {e : Œπ} (he : e ‚àâ S) :
    indicatorChain Œ≥ S e = 0 := by
  classical
  simp [indicatorChain, he]

/-- Pointwise ‚ÄúXOR‚Äù of two chains, implemented as subtraction. In characteristic two
this coincides with addition, but phrasing it as subtraction avoids any extra
algebraic prerequisites in the intermediate lemmas. -/
def chainXor {Œπ : Type*} (x y : Œπ ‚Üí Color) : Œπ ‚Üí Color :=
  fun e => x e + (-y e)

@[simp] lemma chainXor_apply {Œπ : Type*} (x y : Œπ ‚Üí Color) (e : Œπ) :
    chainXor x y e = x e + (-y e) := rfl

lemma chainXor_add_right_cancel {Œπ : Type*} (x y z : Œπ ‚Üí Color) :
    chainXor (x + z) (y + z) = chainXor x y := by
  funext e
  simp [chainXor, add_comm, add_assoc]

/-- **Lemma 4.3 (Per-run purification, pointwise form).** If two chains agree
off a distinguished run `R`, and differ by `Œ≥` on `R`, then their `XOR`
restricts precisely to the indicator of `R`. This isolates the combinatorial
heart of the per-run argument; the geometric hypotheses will later supply the
pointwise equalities. -/
lemma perRunPurification_pointwise {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) (R : Finset Œπ) {X Y : Œπ ‚Üí Color}
    (h_off : ‚àÄ e, e ‚àâ R ‚Üí X e = Y e)
    (h_on  : ‚àÄ e ‚àà R, chainXor X Y e = Œ≥) :
    chainXor X Y = indicatorChain Œ≥ R := by
  classical
  refine funext ?_
  intro e
  by_cases he : e ‚àà R
  ¬∑
    have hind : indicatorChain Œ≥ R e = Œ≥ := by
      simp [indicatorChain, he]
    exact (h_on e he).trans hind.symm
  ¬∑ have hXY : X e = Y e := h_off e he
    have hzero : chainXor X Y e = 0 := by
      simp [chainXor, hXY]
    have hind : indicatorChain Œ≥ R e = 0 := by
      simp [indicatorChain, he]
    exact hzero.trans hind.symm

/-- Aggregate face generator obtained by choosing, for every run, a completion set.
This models the quantity `X_f^{Œ±Œ≤}` from Goertzel's formulation. -/
def faceGenerator {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) (runs : Finset (Finset Œπ)) (assign : Finset Œπ ‚Üí Finset Œπ) :
    Œπ ‚Üí Color :=
  ‚àë R ‚àà runs, indicatorChain Œ≥ (assign R)

/-- **Lemma 4.3 (Per-run purification, aggregated form).** If two assignments agree
on every run except a distinguished `R`, and their associated chains differ there by
`Œ≥ ¬∑ 1_R`, then the difference of the face generators is exactly `Œ≥ ¬∑ 1_R`. -/
lemma perRunPurification_face {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) (runs : Finset (Finset Œπ))
    (R : Finset Œπ) (assign assign' : Finset Œπ ‚Üí Finset Œπ)
    (hR : R ‚àà runs)
    (h_off : ‚àÄ S ‚àà runs, S ‚â† R ‚Üí assign S = assign' S)
    (h_run :
      chainXor (indicatorChain Œ≥ (assign R)) (indicatorChain Œ≥ (assign' R))
        = indicatorChain Œ≥ R) :
    chainXor (faceGenerator Œ≥ runs assign)
      (faceGenerator Œ≥ runs assign') = indicatorChain Œ≥ R := by
  classical
  have hsum_assign :=
    Finset.add_sum_erase (s := runs)
      (f := fun S : Finset Œπ => indicatorChain Œ≥ (assign S)) hR
  have hsum_assign' :=
    Finset.add_sum_erase (s := runs)
      (f := fun S : Finset Œπ => indicatorChain Œ≥ (assign' S)) hR
  set rest :=
    ‚àë S ‚àà runs.erase R, indicatorChain Œ≥ (assign S) with hrest_def
  set rest' :=
    ‚àë S ‚àà runs.erase R, indicatorChain Œ≥ (assign' S) with hrest'_def
  have hrest_eq : rest = rest' := by
    have hsum :
        ‚àë S ‚àà runs.erase R, indicatorChain Œ≥ (assign S) =
          ‚àë S ‚àà runs.erase R, indicatorChain Œ≥ (assign' S) := by
      refine Finset.sum_congr rfl ?_
      intro S hS
      obtain ‚ü®hS_ne, hS_runs‚ü© := Finset.mem_erase.mp hS
      have hassign := h_off S hS_runs hS_ne
      simpa [indicatorChain, hassign]
    simpa [rest, rest', hrest_def, hrest'_def] using hsum
  have hface_assign :
      indicatorChain Œ≥ (assign R) + rest =
        faceGenerator Œ≥ runs assign := by
    simpa [faceGenerator, rest, hrest_def] using hsum_assign
  have hface_assign' :
      indicatorChain Œ≥ (assign' R) + rest' =
        faceGenerator Œ≥ runs assign' := by
    simpa [faceGenerator, rest', hrest'_def] using hsum_assign'
  calc
    chainXor (faceGenerator Œ≥ runs assign) (faceGenerator Œ≥ runs assign')
        = chainXor (indicatorChain Œ≥ (assign R) + rest)
            (indicatorChain Œ≥ (assign' R) + rest') := by
              simp [hface_assign.symm, hface_assign'.symm]
    _ = chainXor (indicatorChain Œ≥ (assign R) + rest)
            (indicatorChain Œ≥ (assign' R) + rest) := by
              simpa [hrest_eq]
    _ = chainXor (indicatorChain Œ≥ (assign R))
            (indicatorChain Œ≥ (assign' R)) :=
              chainXor_add_right_cancel _ _ _
    _ = indicatorChain Œ≥ R := h_run

/-- Summing the `Œ≥`-indicator chains over a partition of `boundary` recovers the
indicator of the whole boundary. This is the algebraic heart of Lemma‚ÄØ4.4. -/
lemma indicatorChain_of_partition {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) (runs : Finset (Finset Œπ)) (boundary : Finset Œπ)
    (h_subset : ‚àÄ R ‚àà runs, R ‚äÜ boundary)
    (h_cover : ‚àÄ e ‚àà boundary, ‚àÉ! R, R ‚àà runs ‚àß e ‚àà R) :
    faceGenerator Œ≥ runs (fun R => R) = indicatorChain Œ≥ boundary := by
  classical
  refine funext ?_
  intro e
  by_cases he : e ‚àà boundary
  ¬∑ rcases h_cover e he with ‚ü®R‚ÇÄ, hR‚ÇÄP, huniq‚ü©
    rcases hR‚ÇÄP with ‚ü®hR‚ÇÄ_runs, heR‚ÇÄ‚ü©
    have hsum :=
      Finset.add_sum_erase (s := runs)
        (f := fun S : Finset Œπ => if e ‚àà S then Œ≥ else 0) hR‚ÇÄ_runs
    have hrest_zero :
        ‚àë S ‚àà runs.erase R‚ÇÄ, (if e ‚àà S then Œ≥ else 0) = 0 := by
      refine Finset.sum_eq_zero ?_
      intro S hS
      obtain ‚ü®hSr, hS_runs‚ü© := Finset.mem_erase.mp hS
      have : e ‚àâ S := by
        by_contra heS
        have hmatch : S = R‚ÇÄ :=
          huniq S ‚ü®hS_runs, heS‚ü©
        exact hSr hmatch
      simp [this]
    have hsum_eval :
        ‚àë S ‚àà runs, (if e ‚àà S then Œ≥ else 0) = Œ≥ := by
      have := hsum.symm
      -- `hsum` gives the equation `(if e ‚àà R‚ÇÄ then Œ≥ else 0) + rest = total`.
      -- After simplifying we deduce `‚àë ... = Œ≥`.
      simpa [heR‚ÇÄ, hrest_zero] using this
    simpa [faceGenerator, indicatorChain, he]
      using hsum_eval
  ¬∑ have : ‚àÄ R ‚àà runs, e ‚àâ R := by
      intro R hR
      exact fun heR => he ((h_subset R hR) heR)
    have hsum_zero :
        ‚àë S ‚àà runs, (if e ‚àà S then Œ≥ else 0) = 0 := by
      refine Finset.sum_eq_zero ?_
      intro S hS
      have : e ‚àâ S := this S hS
      simp [this]
    simpa [faceGenerator, indicatorChain, he] using hsum_zero

/-- **Lemma 4.4 (Face-level purification, algebraic form).** If the Œ±Œ≤-runs on a
face partition its boundary, then the XOR (i.e. sum) of their per-run
purification contributions equals the boundary indicator. -/
lemma faceLevelPurification {Œπ : Type*} [DecidableEq Œπ]
    (Œ≥ : Color) (runs : Finset (Finset Œπ)) (boundary : Finset Œπ)
    (X : Œπ ‚Üí Color) (Y : Finset Œπ ‚Üí Œπ ‚Üí Color)
    (h_run : ‚àÄ R ‚àà runs, chainXor X (Y R) = indicatorChain Œ≥ R)
    (h_subset : ‚àÄ R ‚àà runs, R ‚äÜ boundary)
    (h_cover : ‚àÄ e ‚àà boundary, ‚àÉ! R, R ‚àà runs ‚àß e ‚àà R) :
    ‚àë R ‚àà runs, chainXor X (Y R) = indicatorChain Œ≥ boundary := by
  classical
  have hrewrite :
      ‚àë R ‚àà runs, chainXor X (Y R)
        = ‚àë R ‚àà runs, indicatorChain Œ≥ R := by
    refine Finset.sum_congr rfl ?_
    intro R hR
    simpa using h_run R hR
  have hpartition :=
    indicatorChain_of_partition (Œ≥ := Œ≥) (runs := runs) (boundary := boundary)
      h_subset h_cover
  calc
    ‚àë R ‚àà runs, chainXor X (Y R)
        = ‚àë R ‚àà runs, indicatorChain Œ≥ R := hrewrite
    _ = faceGenerator Œ≥ runs (fun R => R) := rfl
    _ = indicatorChain Œ≥ boundary := hpartition

/-- Data needed to instantiate Lemma‚ÄØ4.4 in the concrete geometric setting:
the runs give a partition of the boundary, each run has an associated Kempe
completion, and the per-run XOR reduces to the run indicator. -/
structure FaceRunPurificationData (Œπ : Type*) [DecidableEq Œπ] where
  Œ≥ : Color
  runs : Finset (Finset Œπ)
  boundary : Finset Œπ
  base : Œπ ‚Üí Color
  switched : Finset Œπ ‚Üí Œπ ‚Üí Color
  run_chain : ‚àÄ R ‚àà runs, chainXor base (switched R) = indicatorChain Œ≥ R
  subset_boundary : ‚àÄ R ‚àà runs, R ‚äÜ boundary
  cover_boundary : ‚àÄ e ‚àà boundary, ‚àÉ! R, R ‚àà runs ‚àß e ‚àà R

namespace FaceRunPurificationData

/-- The aggregated per-run purification equals the boundary indicator (Lemma‚ÄØ4.4). -/
lemma boundary_indicator {Œπ : Type*} [DecidableEq Œπ]
    (D : FaceRunPurificationData Œπ) :
    ‚àë R ‚àà D.runs, chainXor D.base (D.switched R)
        = indicatorChain D.Œ≥ D.boundary :=
  faceLevelPurification (Œ≥ := D.Œ≥) (runs := D.runs)
    (boundary := D.boundary) (X := D.base) (Y := D.switched)
    D.run_chain D.subset_boundary D.cover_boundary

end FaceRunPurificationData

/-!
The following records package the combinatorial data that arise from
partitioning a face boundary into Œ±Œ≤-runs and providing a Kempe completion
for each such run.  They serve as the geometric bridge to the algebraic
lemma `FaceRunPurificationData.boundary_indicator`.
-/

/-- A combinatorial description of a face boundary decomposed into finite runs. -/
structure FaceRunPartition (Œπ : Type*) [DecidableEq Œπ] where
  runs : Finset (Finset Œπ)
  boundary : Finset Œπ
  subset_boundary : ‚àÄ R ‚àà runs, R ‚äÜ boundary
  cover_boundary : ‚àÄ e ‚àà boundary, ‚àÉ! R, R ‚àà runs ‚àß e ‚àà R

namespace FaceRunPartition

variable {Œπ : Type*} [DecidableEq Œπ]

/-- Construct a `FaceRunPurificationData` once the base colouring and per-run
switched colourings are supplied for a face run partition. -/
structure SwitchData (P : FaceRunPartition Œπ) where
  Œ≥ : Color
  base : Œπ ‚Üí Color
  switched : ‚àÄ ‚¶ÉR‚¶Ñ, R ‚àà P.runs ‚Üí (Œπ ‚Üí Color)
  run_chain :
    ‚àÄ {R} (hR : R ‚àà P.runs),
      chainXor base (switched hR) = indicatorChain Œ≥ R

namespace SwitchData

variable {P : FaceRunPartition Œπ} (S : SwitchData P)

/-- Switched colouring that sends runs outside `P.runs` to the zero chain. -/
def switchedTotal : Finset Œπ ‚Üí Œπ ‚Üí Color :=
  fun R =>
    if hR : R ‚àà P.runs then S.switched hR else fun _ => (0,0)

lemma switchedTotal_apply_of_mem {R : Finset Œπ} (hR : R ‚àà P.runs) :
    S.switchedTotal R = S.switched hR := by
  funext e; unfold switchedTotal; simp [hR]

lemma switchedTotal_apply_of_not_mem {R : Finset Œπ} (hR : R ‚àâ P.runs) :
    S.switchedTotal R = fun _ => (0,0) := by
  funext e; unfold switchedTotal; simp [hR]

lemma run_chain_total {R : Finset Œπ} (hR : R ‚àà P.runs) :
    chainXor S.base (S.switchedTotal R) = indicatorChain S.Œ≥ R := by
  classical
  simpa [switchedTotal_apply_of_mem (S := S) hR] using S.run_chain (P := P) hR

/-- Assemble a `FaceRunPurificationData` from partition data and per-run switches. -/
def toPurificationData : FaceRunPurificationData Œπ where
  Œ≥ := S.Œ≥
  runs := P.runs
  boundary := P.boundary
  base := S.base
  switched := S.switchedTotal
  run_chain := by
    intro R hR
    exact S.run_chain_total (P := P) hR
  subset_boundary := P.subset_boundary
  cover_boundary := P.cover_boundary

end SwitchData

end FaceRunPartition

/-
## Facial basis scaffolding (towards Lemma‚ÄØ4.5)

We prepare lightweight containers for the zero-boundary condition and the
dual-forest hypotheses.  The actual inductive proof will be added in a later
pass once the geometric data is available.
-/

section FacialBasis

variable {V E : Type*} [Fintype V] [DecidableEq V]
variable [Fintype E] [DecidableEq E]

structure ZeroBoundaryData (V E : Type*)
    [Fintype V] [DecidableEq V] [Fintype E] [DecidableEq E] where
  incident : V ‚Üí Finset E
  boundaryEdges : Finset E

namespace ZeroBoundaryData

variable (D : ZeroBoundaryData V E)

def isZeroBoundary (x : E ‚Üí Color) : Prop :=
  ‚àÄ v : V, ‚àë e ‚àà D.incident v, x e = (0,0)

/-- Chains that vanish on every vertex and on the distinguished boundary. -/
def zeroBoundarySet : Set (E ‚Üí Color) :=
  {x | D.isZeroBoundary x ‚àß ‚àÄ e ‚àà D.boundaryEdges, x e = (0,0)}

lemma zeroChain_isZeroBoundary {V E : Type*} [Fintype V] [DecidableEq V]
    [Fintype E] [DecidableEq E] (D : ZeroBoundaryData V E) :
    D.isZeroBoundary (zeroChain (E := E)) := by
  intro v
  simp [ZeroBoundaryData.isZeroBoundary, zeroChain]

lemma zeroChain_mem_zeroBoundarySet {V E : Type*} [Fintype V] [DecidableEq V]
    [Fintype E] [DecidableEq E] (D : ZeroBoundaryData V E) :
    zeroChain (E := E) ‚àà D.zeroBoundarySet := by
  refine ‚ü®zeroChain_isZeroBoundary (E := E) D, ?_‚ü©
  intro e he
  rfl

lemma isZeroBoundary_add (D : ZeroBoundaryData V E)
    {x y : E ‚Üí Color}
    (hx : D.isZeroBoundary x) (hy : D.isZeroBoundary y) :
    D.isZeroBoundary (x + y) := by
  intro v
  -- ‚àë (x + y) = ‚àë x + ‚àë y = 0
  simpa [Pi.add_apply, Finset.sum_add_distrib, hx v, hy v]

lemma mem_zero_add (D : ZeroBoundaryData V E)
    {x y : E ‚Üí Color}
    (hx : x ‚àà D.zeroBoundarySet) (hy : y ‚àà D.zeroBoundarySet) :
    x + y ‚àà D.zeroBoundarySet := by
  rcases hx with ‚ü®hxV, hxB‚ü©
  rcases hy with ‚ü®hyV, hyB‚ü©
  refine ‚ü®D.isZeroBoundary_add hxV hyV, ?_‚ü©
  intro e he
  -- boundary values: (x + y) e = 0 + 0
  simp [hxB e he, hyB e he]

lemma sum_mem_zero {Œπ : Type*} [Fintype Œπ] [DecidableEq Œπ]
    (D : ZeroBoundaryData V E)
    (S : Finset Œπ) (f : Œπ ‚Üí E ‚Üí Color)
    (h : ‚àÄ i ‚àà S, f i ‚àà D.zeroBoundarySet) :
    (‚àë i ‚àà S, f i) ‚àà D.zeroBoundarySet := by
  classical
  induction' S using Finset.induction with i S hi ih
  ¬∑ simpa using D.zeroChain_mem_zeroBoundarySet
  ¬∑ have hi' : f i ‚àà D.zeroBoundarySet := h i (Finset.mem_insert_self _ _)
    have hS : ‚àÄ j ‚àà S, f j ‚àà D.zeroBoundarySet :=
      fun j hj => h j (Finset.mem_insert_of_mem hj)
    simpa [Finset.sum_insert hi] using
      D.mem_zero_add hi' (ih hS)

end ZeroBoundaryData


/-- Chain attached to the boundary of a face, coloured by `Œ≥`. -/
def faceBoundaryChain (Œ≥ : Color) (f : Finset E) : E ‚Üí Color :=
  indicatorChain Œ≥ f

/-- Toggling a face at Œ≥=(1,0) flips exactly the first coordinate on edges of `f`. -/
lemma support‚ÇÅ_toggle_symmDiff {E : Type*} [Fintype E] [DecidableEq E]
    (f : Finset E) :
    support‚ÇÅ (faceBoundaryChain (Œ≥ := (1,0)) f) = f := by
  classical
  ext e
  by_cases he : e ‚àà f
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]

/-- When adding a face boundary at Œ≥=(1,0), the Œ≥-support changes via symmetric difference. -/
lemma support‚ÇÅ_after_toggle {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} {f : Finset E} :
    support‚ÇÅ (x + faceBoundaryChain (Œ≥ := (1,0)) f)
      = (support‚ÇÅ x \ f) ‚à™ (f \ support‚ÇÅ x) := by
  classical
  ext e
  by_cases he : e ‚àà f
  ¬∑ -- first coordinate flips on f
    have hŒ≥ : (faceBoundaryChain (Œ≥ := (1,0)) f e).fst = 1 := by
      simp [faceBoundaryChain, indicatorChain, he]
    -- In F‚ÇÇ: 0+1=1‚â†0 and 1+1=0, so (x e).fst + 1 ‚â† 0 ‚Üî (x e).fst = 0
    have : (x e).fst = 0 ‚à® (x e).fst = 1 := by
      rcases (x e).fst with ‚ü®v, hv‚ü©
      interval_cases v <;> simp
    rcases this with h0 | h1
    ¬∑ simp [he, hŒ≥, h0, Finset.mem_union, Finset.mem_sdiff]
    ¬∑ simp [he, hŒ≥, h1, Finset.mem_union, Finset.mem_sdiff]
  ¬∑ -- off f, first coordinate unchanged
    have hŒ≥ : (faceBoundaryChain (Œ≥ := (1,0)) f e).fst = 0 := by
      simp [faceBoundaryChain, indicatorChain, he]
    simp [he, hŒ≥, Finset.mem_union, Finset.mem_sdiff]

/-- Toggling a face at Œ≥=(0,1) flips exactly the second coordinate on edges of `f`. -/
lemma support‚ÇÇ_toggle_symmDiff {E : Type*} [Fintype E] [DecidableEq E]
    (f : Finset E) :
    support‚ÇÇ (faceBoundaryChain (Œ≥ := (0,1)) f) = f := by
  classical
  ext e
  by_cases he : e ‚àà f
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]

/-- When adding a face boundary at Œ≥=(0,1), the Œ≥‚ÇÇ-support changes via symmetric difference. -/
lemma support‚ÇÇ_after_toggle {E : Type*} [Fintype E] [DecidableEq E]
    {x : E ‚Üí Color} {f : Finset E} :
    support‚ÇÇ (x + faceBoundaryChain (Œ≥ := (0,1)) f)
      = (support‚ÇÇ x \ f) ‚à™ (f \ support‚ÇÇ x) := by
  classical
  ext e
  by_cases he : e ‚àà f
  ¬∑ -- second coordinate flips on f
    have hŒ≥ : (faceBoundaryChain (Œ≥ := (0,1)) f e).snd = 1 := by
      simp [faceBoundaryChain, indicatorChain, he]
    have : (x e).snd = 0 ‚à® (x e).snd = 1 := by
      rcases (x e).snd with ‚ü®v, hv‚ü©
      interval_cases v <;> simp
    rcases this with h0 | h1
    ¬∑ simp [he, hŒ≥, h0, Finset.mem_union, Finset.mem_sdiff]
    ¬∑ simp [he, hŒ≥, h1, Finset.mem_union, Finset.mem_sdiff]
  ¬∑ -- off f, second coordinate unchanged
    have hŒ≥ : (faceBoundaryChain (Œ≥ := (0,1)) f e).snd = 0 := by
      simp [faceBoundaryChain, indicatorChain, he]
    simp [he, hŒ≥, Finset.mem_union, Finset.mem_sdiff]

/-- Fold symmetric difference over a list of faces, tracking support changes across multiple toggles.
This helper is useful for analyzing how support evolves when toggling multiple faces sequentially. -/
def symmDiffFold {E : Type*} [DecidableEq E]
    (initial : Finset E) (faces : List (Finset E)) : Finset E :=
  faces.foldl (fun acc f => (acc \ f) ‚à™ (f \ acc)) initial

@[simp] lemma symmDiffFold_nil {E : Type*} [DecidableEq E] (initial : Finset E) :
    symmDiffFold initial [] = initial := by
  unfold symmDiffFold
  rfl

lemma symmDiffFold_cons {E : Type*} [DecidableEq E]
    (initial : Finset E) (f : Finset E) (faces : List (Finset E)) :
    symmDiffFold initial (f :: faces) =
      symmDiffFold ((initial \ f) ‚à™ (f \ initial)) faces := by
  unfold symmDiffFold
  simp [List.foldl]

-- First-coordinate pointwise evaluation for a single face boundary at Œ≥=(1,0).
@[simp] lemma fst_faceBoundary_at {E : Type*} [Fintype E] [DecidableEq E]
    (f : Finset E) (e : E) :
    (faceBoundaryChain (Œ≥ := (1,0)) f e).fst
      = (if e ‚àà f then (1 : ZMod 2) else 0) := by
  classical
  by_cases he : e ‚àà f
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]

-- Second-coordinate pointwise evaluation for a single face boundary at Œ≥=(0,1).
@[simp] lemma snd_faceBoundary_at {E : Type*} [Fintype E] [DecidableEq E]
    (f : Finset E) (e : E) :
    (faceBoundaryChain (Œ≥ := (0,1)) f e).snd
      = (if e ‚àà f then (1 : ZMod 2) else 0) := by
  classical
  by_cases he : e ‚àà f
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]
  ¬∑ simp [faceBoundaryChain, indicatorChain, he]

/-- Œ≥=(1,0): the first coordinate of the finite sum at edge `e` is
the Z‚ÇÇ-sum of membership indicators `(e ‚àà f)` over `f ‚àà S`. -/
lemma fst_sum_faceBoundary_at {E : Type*} [Fintype E] [DecidableEq E]
    (S : Finset (Finset E)) (e : E) :
    ((‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (1,0)) f) e).fst
      = ‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0) := by
  classical
  revert e
  refine Finset.induction_on S ?base ?step
  ¬∑ intro e; simp
  ¬∑ intro a S ha ih e
    rw [Finset.sum_insert ha, Finset.sum_insert ha, Pi.add_apply]
    -- Goal: (faceBoundaryChain (1,0) a e + (‚àë x ‚àà S, faceBoundaryChain (1,0) x) e).fst = ...
    -- .fst distributes over +
    show (faceBoundaryChain (1, 0) a e + (‚àë x ‚àà S, faceBoundaryChain (1, 0) x) e).fst =
      (if e ‚àà a then 1 else 0) + ‚àë f ‚àà S, if e ‚àà f then 1 else 0
    simp only [Prod.fst_add, fst_faceBoundary_at]
    congr 1
    exact ih e

/-- Œ≥=(0,1): the second coordinate of the finite sum at edge `e` is
the Z‚ÇÇ-sum of membership indicators `(e ‚àà f)` over `f ‚àà S`. -/
lemma snd_sum_faceBoundary_at {E : Type*} [Fintype E] [DecidableEq E]
    (S : Finset (Finset E)) (e : E) :
    ((‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (0,1)) f) e).snd
      = ‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0) := by
  classical
  revert e
  refine Finset.induction_on S ?base ?step
  ¬∑ intro e; simp
  ¬∑ intro a S ha ih e
    rw [Finset.sum_insert ha, Finset.sum_insert ha, Pi.add_apply]
    -- Goal: (faceBoundaryChain (0,1) a e + (‚àë x ‚àà S, faceBoundaryChain (0,1) x) e).snd = ...
    -- .snd distributes over +
    show (faceBoundaryChain (0, 1) a e + (‚àë x ‚àà S, faceBoundaryChain (0, 1) x) e).snd =
      (if e ‚àà a then 1 else 0) + ‚àë f ‚àà S, if e ‚àà f then 1 else 0
    simp only [Prod.snd_add, snd_faceBoundary_at]
    congr 1
    exact ih e

/-- Edges toggled by the sum of face boundaries at Œ≥=(1,0) are exactly those
with odd incidence across the summation set. -/
def oddOn {E : Type*} [Fintype E] [DecidableEq E]
    (S : Finset (Finset E)) : Finset E :=
  Finset.univ.filter (fun e =>
    (‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0)) ‚â† 0)

-- Clean parity identity for Œ≥ = (1,0): support‚ÇÅ of the sum equals the odd-incidence set.
lemma support‚ÇÅ_sum_faceBoundary_gamma10_eq_oddOn {E : Type*}
    [Fintype E] [DecidableEq E]
    (S : Finset (Finset E)) :
    support‚ÇÅ (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (1,0)) f) = oddOn S := by
  classical
  ext e
  -- pointwise at e; keep simp minimal so we don't trigger card-of-filter lemmas:
  have hfst : ((‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (1,0)) f) e).fst
               = ‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0) :=
    fst_sum_faceBoundary_at S e
  have hsum_odd : (‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0)) ‚â† 0
          ‚Üî e ‚àà oddOn S := by
    -- literal def of oddOn
    simp only [oddOn, Finset.mem_filter, Finset.mem_univ, true_and]
  -- LHS membership is "fst ‚â† 0" by def of support‚ÇÅ
  have hlhs : e ‚àà support‚ÇÅ (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (1,0)) f)
          ‚Üî ((‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0)) ‚â† 0) := by
    -- def of support‚ÇÅ + rewrite at e via hfst
    simp only [support‚ÇÅ, Finset.mem_filter, Finset.mem_univ, true_and]
    rw [hfst]
  -- done
  rw [hlhs, hsum_odd]

lemma support‚ÇÅ_sum_faceBoundary_of_zero {E : Type*} [Fintype E] [DecidableEq E]
    (S : Finset (Finset E)) :
    support‚ÇÅ (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (1,0)) f) = oddOn S :=
  support‚ÇÅ_sum_faceBoundary_gamma10_eq_oddOn S

-- Symmetric (0,1) parity lemma: support‚ÇÇ of the sum equals the odd-incidence set.
lemma support‚ÇÇ_sum_faceBoundary_gamma01_eq_oddOn {E : Type*}
    [Fintype E] [DecidableEq E]
    (S : Finset (Finset E)) :
    support‚ÇÇ (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (0,1)) f) = oddOn S := by
  classical
  ext e
  have hsnd : ((‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (0,1)) f) e).snd
               = ‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0) :=
    snd_sum_faceBoundary_at S e
  have hsum_odd : (‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0)) ‚â† 0
          ‚Üî e ‚àà oddOn S := by
    simp only [oddOn, Finset.mem_filter, Finset.mem_univ, true_and]
  have hlhs : e ‚àà support‚ÇÇ (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := (0,1)) f)
          ‚Üî ((‚àë f ‚àà S, (if e ‚àà f then (1 : ZMod 2) else 0)) ‚â† 0) := by
    simp only [support‚ÇÇ, Finset.mem_filter, Finset.mem_univ, true_and]
    rw [hsnd]
  rw [hlhs, hsum_odd]

/-- "Span" of face boundary chains: all finite XOR-sums of the given face
boundaries, coloured by `Œ≥`.  We encode the span concretely via `Finset` sums so
that we remain within the current function-based formalisation of chains. -/
def faceBoundarySpan (Œ≥ : Color) (faces : Finset (Finset E)) : Set (E ‚Üí Color) :=
  {x | ‚àÉ S ‚äÜ faces, x = ‚àë f ‚àà S, faceBoundaryChain (Œ≥ := Œ≥) f}
section FaceBoundaryHelpers

variable {V E : Type*} [Fintype V] [DecidableEq V]
variable [Fintype E] [DecidableEq E]

lemma mem_faceBoundarySpan_of_subset {Œ≥ : Color}
    {faces S : Finset (Finset E)} (hS : S ‚äÜ faces) :
    (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := Œ≥) f) ‚àà faceBoundarySpan Œ≥ faces := by
  refine ‚ü®S, hS, rfl‚ü©

lemma faceBoundarySpan_mono {Œ≥ : Color} {faces faces' : Finset (Finset E)}
    (hfaces : faces ‚äÜ faces') :
    faceBoundarySpan Œ≥ faces ‚äÜ faceBoundarySpan Œ≥ faces' := by
  intro x hx
  rcases hx with ‚ü®S, hS, hsum‚ü©
  exact ‚ü®S, hS.trans hfaces, hsum‚ü©

/-- Over `ùîΩ‚ÇÇ √ó ùîΩ‚ÇÇ`, a face boundary added to itself is the zero chain. -/
lemma faceBoundaryChain_add_self {Œ≥ : Color} (f : Finset E) :
    faceBoundaryChain (Œ≥ := Œ≥) f + faceBoundaryChain (Œ≥ := Œ≥) f
      = zeroChain (E := E) := by
  classical
  funext e
  by_cases he : e ‚àà f
  ¬∑ rcases Œ≥ with ‚ü®Œ≥‚ÇÅ, Œ≥‚ÇÇ‚ü©
    ext <;> simp [faceBoundaryChain, zeroChain, he, zmod2_add_self]
  ¬∑ ext <;> simp [faceBoundaryChain, zeroChain, he]

/-
Linearity of `chainDot` over finite sums of face boundaries, used to push
orthogonality from generators to their finite XOR-sums.
-/
-- (reserved for future: orthogonality propagation to spans)

/-- Summation helper: adding a fresh face toggles its boundary chain. -/
lemma sum_faceBoundary_insert {Œ≥ : Color} {faces : Finset (Finset E)} {face : Finset E}
    (hface : face ‚àâ faces) :
    (‚àë f ‚àà insert face faces, faceBoundaryChain (Œ≥ := Œ≥) f)
        = faceBoundaryChain (Œ≥ := Œ≥) face
            + ‚àë f ‚àà faces, faceBoundaryChain (Œ≥ := Œ≥) f := by
  classical
  simpa using
    (Finset.sum_insert (s := faces) (a := face)
      (f := fun f => faceBoundaryChain (Œ≥ := Œ≥) f)
      (by simpa using hface))

lemma sum_faceBoundary_face_plus_erase_eq {Œ≥ : Color}
    {faces : Finset (Finset E)} {face : Finset E}
    (hface : face ‚àà faces) :
    faceBoundaryChain (Œ≥ := Œ≥) face
      + ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f
        = ‚àë f ‚àà faces, faceBoundaryChain (Œ≥ := Œ≥) f := by
  classical
  have hnot : face ‚àâ faces.erase face := Finset.notMem_erase _ _
  have hperm : insert face (faces.erase face) = faces := Finset.insert_erase hface
  have hsum :
      ‚àë f ‚àà insert face (faces.erase face), faceBoundaryChain (Œ≥ := Œ≥) f =
        faceBoundaryChain (Œ≥ := Œ≥) face
          + ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f := by
    simpa using
      (Finset.sum_insert (s := faces.erase face) (a := face)
        (f := fun f => faceBoundaryChain (Œ≥ := Œ≥) f)
        (by simpa using hnot))
  calc
    faceBoundaryChain (Œ≥ := Œ≥) face
        + ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f
        = ‚àë f ‚àà insert face (faces.erase face), faceBoundaryChain (Œ≥ := Œ≥) f := by
            simpa [add_comm] using hsum.symm
    _ = ‚àë f ‚àà faces, faceBoundaryChain (Œ≥ := Œ≥) f := by
            simpa [hperm]

/-- Summation helper: removing a face toggles its boundary chain. -/
lemma sum_faceBoundary_erase {Œ≥ : Color} {faces : Finset (Finset E)} {face : Finset E}
    (hface : face ‚àà faces) :
    (‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f)
        = faceBoundaryChain (Œ≥ := Œ≥) face
            + ‚àë f ‚àà faces, faceBoundaryChain (Œ≥ := Œ≥) f := by
  classical
  have hsum :=
    sum_faceBoundary_face_plus_erase_eq (Œ≥ := Œ≥) (faces := faces) (face := face) hface
  calc
    ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f
        = zeroChain (E := E) +
            ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f := by simp [zeroChain]
    _ = (faceBoundaryChain (Œ≥ := Œ≥) face + faceBoundaryChain (Œ≥ := Œ≥) face)
            + ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f := by
              simp [faceBoundaryChain_add_self, add_comm, add_left_comm, add_assoc]
    _ = faceBoundaryChain (Œ≥ := Œ≥) face
            + (faceBoundaryChain (Œ≥ := Œ≥) face
                + ‚àë f ‚àà faces.erase face, faceBoundaryChain (Œ≥ := Œ≥) f) := by
              simp [add_comm, add_left_comm, add_assoc]
    _ = faceBoundaryChain (Œ≥ := Œ≥) face
            + ‚àë f ‚àà faces, faceBoundaryChain (Œ≥ := Œ≥) f := by
              simpa [hsum, add_comm, add_left_comm, add_assoc]

end FaceBoundaryHelpers

/-- Data needed to perform the leaf-peeling induction for Lemma‚ÄØ4.5. -/
structure LeafPeelData (V E : Type*) [Fintype V] [DecidableEq V]
    [Fintype E] [DecidableEq E] where
  zero : ZeroBoundaryData V E
  gamma : Color := (1,0)
  internalFaces : Finset (Finset E)
  boundary_mem_zero :
    ‚àÄ {f}, f ‚àà internalFaces ‚Üí
      faceBoundaryChain (Œ≥ := gamma) f ‚àà zero.zeroBoundarySet
  /-- Tightness: chains with empty Œ≥-support are zero. This holds for planar disks
  where interior edges form a basis, or can be proven by iterating over Œ≥=(0,1). -/
  tight :
    ‚àÄ {x}, x ‚àà zero.zeroBoundarySet ‚Üí support‚ÇÅ x = ‚àÖ ‚Üí x = zeroChain (E := E)
  /-- **Cardinality decrease version**: the induction only needs `card (support‚ÇÅ x') < card (support‚ÇÅ x)`. -/
  peel :
    ‚àÄ {x},
      x ‚àà zero.zeroBoundarySet ‚Üí
      support‚ÇÅ x ‚â† ‚àÖ ‚Üí
      ‚àÉ f ‚àà internalFaces, ‚àÉ x',
        x' ‚àà zero.zeroBoundarySet ‚àß
        x = x' + faceBoundaryChain (Œ≥ := gamma) f ‚àß
        Finset.card (support‚ÇÅ x') < Finset.card (support‚ÇÅ x)

/-- Data for leaf-peeling induction using **multi-face aggregated peels** (Option A from LEAF_CUT_SWITCH.md).

This structure directly implements the paper's approach from ¬ß4.2 (Lemma 4.8, Theorem 4.9).
Unlike `LeafPeelData` which returns a single face, this returns a set of faces S‚ÇÄ (a leaf-subtree)
and uses the aggregated toggle BÃÉ_Œ±Œ≤(S‚ÇÄ) = ‚äï_{f ‚àà S‚ÇÄ} B^f_Œ±Œ≤.

The `peel_sum` field is **directly provable** using the cut-parity and orthogonality arguments
from the paper, whereas the single-face strict cut in `LeafPeelData.peel` requires an extra
factorization step that may be challenging to formalize. -/
structure LeafPeelSumData (V E : Type*) [Fintype V] [DecidableEq V]
    [Fintype E] [DecidableEq E] where
  zero : ZeroBoundaryData V E
  gamma : Color := (1,0)
  internalFaces : Finset (Finset E)
  boundary_mem_zero_sum :
    ‚àÄ {S}, S ‚äÜ internalFaces ‚Üí
      (‚àë f ‚àà S, faceBoundaryChain (Œ≥ := gamma) f) ‚àà zero.zeroBoundarySet
  tight :
    ‚àÄ {x}, x ‚àà zero.zeroBoundarySet ‚Üí support‚ÇÅ x = ‚àÖ ‚Üí x = zeroChain (E := E)
  /-- **Multi-face peel**: Returns a nonempty set S‚ÇÄ ‚äÜ internalFaces (leaf-subtree) such that
  toggling the aggregated sum strictly decreases support‚ÇÅ. This is the formulation
  that directly matches Lemma 4.8 in the paper. -/
  peel_sum :
    ‚àÄ {x},
      x ‚àà zero.zeroBoundarySet ‚Üí
      support‚ÇÅ x ‚â† ‚àÖ ‚Üí
      ‚àÉ (S‚ÇÄ : Finset (Finset E)),
        S‚ÇÄ.Nonempty ‚àß
        S‚ÇÄ ‚äÜ internalFaces ‚àß
        ‚àÉ x',
          x' ‚àà zero.zeroBoundarySet ‚àß
          x = x' + (‚àë f ‚àà S‚ÇÄ, faceBoundaryChain (Œ≥ := gamma) f) ‚àß
          Finset.card (support‚ÇÅ x') < Finset.card (support‚ÇÅ x)

/-- Lemma 4.5: zero-boundary chains lie in the span of the face boundaries. -/
theorem LeafPeelData.facialBasis_zeroBoundary_in_span
    {V E : Type*} [Fintype V] [DecidableEq V]
    [Fintype E] [DecidableEq E]
    (dual : LeafPeelData V E) :
    dual.zero.zeroBoundarySet ‚äÜ faceBoundarySpan dual.gamma dual.internalFaces := by
  classical
  -- Strong induction on Œ≥-coordinate support size.
  have peel_induction :
      ‚àÄ n {x}, x ‚àà dual.zero.zeroBoundarySet ‚Üí
        Finset.card (support‚ÇÅ x) ‚â§ n ‚Üí
        ‚àÉ S ‚äÜ dual.internalFaces,
          x = ‚àë f ‚àà S, faceBoundaryChain (Œ≥ := dual.gamma) f := by
    intro n
    induction' n with n ih
    ¬∑ intro x hx hcard
      have hsupp : support‚ÇÅ x = ‚àÖ := by
        have : Finset.card (support‚ÇÅ x) = 0 :=
          Nat.le_antisymm hcard (Nat.zero_le _)
        exact Finset.card_eq_zero.mp this
      -- When Œ≥=(1,0), if support‚ÇÅ is empty, all first coordinates are zero
      have h_fst_zero : ‚àÄ e, (x e).fst = 0 := support‚ÇÅ_eq_empty_iff.mp hsupp
      -- We want to show x = ‚àë_{f‚àà‚àÖ} faceBoundaryChain Œ≥ f = 0
      -- Strategy: Since faceBoundaryChain Œ≥ f only affects first coordinate,
      -- and x has all first coords zero, we need x to be the zero chain.
      -- For the 4CT, we'd need to handle the second coordinate using Œ≥=(0,1).
      -- Here we make the simplifying assumption that the zero-boundary data
      -- is "Œ≥-tight": chains with Œ≥-support empty are actually zero.
      -- This holds for typical planar graph constructions where edges form a basis.
      -- Full generality would require iterating over both Œ≥=(1,0) and Œ≥=(0,1).
      have hx_zero : x = zeroChain (E := E) :=
        -- Use tightness hypothesis: support‚ÇÅ empty ‚áí x = 0
        dual.tight hx hsupp
      subst hx_zero
      exact ‚ü®‚àÖ, by simp, by simp [faceBoundaryChain, zeroChain]‚ü©
    ¬∑ intro x hx hcard
      by_cases hzero : support‚ÇÅ x = ‚àÖ
      ¬∑ -- Same as base case: use tightness
        have hx_zero : x = zeroChain (E := E) :=
          dual.tight hx hzero
        subst hx_zero
        exact ‚ü®‚àÖ, by simp, by simp [faceBoundaryChain, zeroChain]‚ü©
      ¬∑ obtain ‚ü®f, hf, x', hx', hx_eq, hlt‚ü© :=
          dual.peel hx (by simpa using hzero)
        have hcard' : Finset.card (support‚ÇÅ x') ‚â§ n :=
          (Nat.lt_succ_iff).1 (lt_of_lt_of_le hlt hcard)
        obtain ‚ü®S, hSsubset, hx'S‚ü© := ih hx' hcard'
        by_cases hfS : f ‚àà S
        ¬∑ have hx_sum :=
            sum_faceBoundary_face_plus_erase_eq (Œ≥ := dual.gamma)
              (faces := S) (face := f) hfS
          refine ‚ü®S.erase f, ?_, ?_‚ü©
          ¬∑ intro g hg
            exact hSsubset (Finset.mem_of_mem_erase hg)
          ¬∑ calc
              x = x' + faceBoundaryChain (Œ≥ := dual.gamma) f := hx_eq
              _ = ‚àë g ‚àà S, faceBoundaryChain (Œ≥ := dual.gamma) g
                    + faceBoundaryChain (Œ≥ := dual.gamma) f := by
                        simp [hx'S, add_comm, add_left_comm, add_assoc]
              _ = faceBoundaryChain (Œ≥ := dual.gamma) f
                    + (faceBoundaryChain (Œ≥ := dual.gamma) f
                        + ‚àë g ‚àà S.erase f, faceBoundaryChain (Œ≥ := dual.gamma) g) := by
                        simpa [hx_sum, add_comm, add_left_comm, add_assoc]
              _ = (faceBoundaryChain (Œ≥ := dual.gamma) f
                    + faceBoundaryChain (Œ≥ := dual.gamma) f)
                        + ‚àë g ‚àà S.erase f, faceBoundaryChain (Œ≥ := dual.gamma) g := by
                        simp [add_comm, add_left_comm, add_assoc]
              _ = ‚àë g ‚àà S.erase f, faceBoundaryChain (Œ≥ := dual.gamma) g := by
                        simp [faceBoundaryChain_add_self, zeroChain, add_comm, add_left_comm, add_assoc]
        ¬∑ have hx_sum :=
            sum_faceBoundary_insert (Œ≥ := dual.gamma)
              (faces := S) (face := f) (by simpa using hfS)
          refine ‚ü®insert f S, ?_, ?_‚ü©
          ¬∑ intro g hg
            rcases Finset.mem_insert.mp hg with rfl | hg'
            ¬∑ simpa using hf
            ¬∑ exact hSsubset hg'
          ¬∑ calc
              x = x' + faceBoundaryChain (Œ≥ := dual.gamma) f := hx_eq
              _ = ‚àë g ‚àà S, faceBoundaryChain (Œ≥ := dual.gamma) g
                    + faceBoundaryChain (Œ≥ := dual.gamma) f := by
                        simp [hx'S, add_comm, add_left_comm, add_assoc]
              _ = faceBoundaryChain (Œ≥ := dual.gamma) f
                    + ‚àë g ‚àà S, faceBoundaryChain (Œ≥ := dual.gamma) g := by
                        simp [add_comm, add_left_comm, add_assoc]
              _ = ‚àë g ‚àà insert f S, faceBoundaryChain (Œ≥ := dual.gamma) g := by
                        simpa [hx_sum, add_comm, add_left_comm, add_assoc]
  intro x hx
  obtain ‚ü®S, hSsubset, hxS‚ü© :=
    peel_induction (Finset.card (support‚ÇÅ x)) hx (le_rfl)
  exact ‚ü®S, hSsubset, hxS‚ü©

/-- Convenience wrapper avoiding namespace qualification. -/
lemma facialBasis_zeroBoundary_in_span
    {V E : Type*} [Fintype V] [DecidableEq V]
    [Fintype E] [DecidableEq E]
    (dual : LeafPeelData V E) :
    dual.zero.zeroBoundarySet ‚äÜ faceBoundarySpan dual.gamma dual.internalFaces :=
  dual.facialBasis_zeroBoundary_in_span
