::Lesson 12: MML Integration - WORKING WITH GRAPH_1
::
:: Goal: Import and extend real MML graph structures
:: Key: Build on MultiGraphStruct, use dom/cod, prove real theorems
::
:: THIS IS THE 4CP FOUNDATION!
:: Everything before this prepared you for THIS moment:
:: - Lessons 1-5: Basic Mizar syntax
:: - Lessons 6-7: Type system and registrations
:: - Lesson 8: Schemes (conceptual)
:: - Lesson 9: Structure design patterns
:: - Lesson 10: Proof tactics
:: - Lesson 11: Environment hygiene
:: NOW: Combine it all with real MML infrastructure!

environ
 vocabularies LESSON12, GRAPH_1, XBOOLE_0, SUBSET_1, STRUCT_0, FUNCT_1,
      RELAT_1, ZFMISC_1, FUNCT_2;
 notations XBOOLE_0, SUBSET_1, STRUCT_0, GRAPH_1, FUNCT_1, FUNCT_2;
 constructors XBOOLE_0, SUBSET_1, STRUCT_0, GRAPH_1, FUNCT_2;
 registrations XBOOLE_0, SUBSET_1, STRUCT_0, GRAPH_1, FUNCT_2;

begin

:: ====================
:: USING MML GRAPH_1
:: ====================
:: GRAPH_1 provides:
:: - MultiGraphStruct: (# carrier, carrier', Source, Target #)
:: - Graph mode: non empty MultiGraphStruct
:: - Vertex of G, Edge of G modes
:: - dom f, cod f functors for edge endpoints

:: Reserve variables (MML style)
reserve G, G1, G2 for Graph;
reserve v, w for Vertex of G;
::>                      *306
reserve e for Edge of G;

:: ====================
:: DEFINE NEW GRAPH PROPERTIES
:: ====================
:: Building on GRAPH_1's foundation

definition
  let G be Graph, e be Edge of G;
  attr e is self_loop means
  :Def1:
  dom e = cod e;
end;

definition
  let G be Graph;
  attr G is loop_free means
  :Def2:
  for e being Edge of G holds not (dom e = cod e);
end;

:: ====================
:: PROVE BASIC THEOREMS
:: ====================

theorem Th1:
  for G being Graph, e being Edge of G st e is self_loop
  holds dom e = cod e
proof
  let G be Graph, e be Edge of G;
  assume e is self_loop;
  hence dom e = cod e by Def1;
end;

theorem Th2:
  for G being Graph st G is loop_free
  holds for e being Edge of G holds dom e <> cod e
proof
  let G be Graph;
  assume G is loop_free;
  then for e being Edge of G holds not (dom e = cod e) by Def2;
  hence for e being Edge of G holds dom e <> cod e;
end;

:: ====================
:: COMPLEX EXAMPLE: Edge Endpoint Properties
:: ====================
:: This really tests GRAPH_1 integration!

theorem Th3:
  for G being Graph, e being Edge of G
  holds dom e in the carrier of G & cod e in the carrier of G
proof
  let G be Graph, e be Edge of G;
  dom e is Vertex of G;
::>             *140,306
  hence dom e in the carrier of G;
  cod e is Vertex of G;
::>             *140,306
  hence cod e in the carrier of G;
end;

:: ====================
:: COMPLEX EXAMPLE: New Vertex Property
:: ====================

definition
  let G be Graph, v be Vertex of G;
::>                            *306
  attr v is isolated means
  :Def3:
  for e being Edge of G holds not (dom e = v or cod e = v);
end;

theorem Th4:
  for G being Graph, v being Vertex of G st v is isolated
::>                                  *306
  holds for e being Edge of G holds dom e <> v & cod e <> v
proof
  let G be Graph, v be Vertex of G;
::>                            *306
  assume
A1: v is isolated;
  let e be Edge of G;
  not (dom e = v or cod e = v) by A1, Def3;
  hence dom e <> v & cod e <> v;
end;

:: ====================
:: COMPLEX EXAMPLE: Combined Properties (Really tests it!)
:: ====================

theorem Th5:
  for G being Graph, e being Edge of G st e is self_loop
  holds dom e = cod e & dom e in the carrier of G
proof
  let G be Graph, e be Edge of G;
  assume e is self_loop;
  then
A1: dom e = cod e by Def1;
  dom e is Vertex of G;
::>             *140,306
  hence dom e = cod e & dom e in the carrier of G by A1;
end;

:: ====================
:: REGISTRATION: Loop-free graphs exist
:: ====================
:: This is how you extend MML types!

registration
  cluster strict non empty non void loop_free for MultiGraphStruct;
::>                                         *106,115
  existence
  proof
    :: We'd construct a specific loop-free graph here
    :: For now, showing the pattern
    :: In real 4CP work, you'd prove specific graphs are loop-free
    thus thesis;
  end;
end;

:: ====================
:: KEY LESSONS FOR 4CP
:: ====================
::
:: 1. IMPORT MML STRUCTURES
::    - Use existing GRAPH_1 instead of reinventing
::    - MultiGraphStruct is production-ready
::    - Has decades of accumulated lemmas
::
:: 2. EXTEND, DON'T REPLACE
::    - Define new attributes (self_loop, loop_free)
::    - Prove they work with existing infrastructure
::    - Build hierarchically
::
:: 3. USE MML PATTERNS
::    - reserve for common variables
::    - Modes for type clarity (Vertex of G)
::    - Registrations for type system integration
::
:: 4. REALISTIC ENVIRON
::    - 8 vocabularies (was 2 in Lesson 1!)
::    - Each justified by actual use
::    - GRAPH_1 brings its transitive dependencies
::
:: ====================
:: 4CP APPLICATION
:: ====================
::
:: For 4-Color Theorem, you'd define:
::
:: definition
::   let G be Graph;
::   attr G is planar means
::   :: embedding conditions
::   ;
:: end;
::
:: definition
::   let G be Graph, k be Nat;
::   attr G is k-colorable means
::   :: proper k-coloring exists
::   ;
:: end;
::
:: theorem Four_Color_Theorem:
::   for G being Graph st G is planar
::   holds G is 4-colorable
:: proof
::   :: The proof we're building toward!
:: end;
::
:: ====================
:: COMPARISON TO LESSON 9
:: ====================
::
:: Lesson 9 (Pedagogical):
::   struct IncidenceGraph
::   (# vertices, edges, incidence #)
::
:: Lesson 12 (Production - THIS LESSON):
::   Use GRAPH_1's MultiGraphStruct
::   (# carrier, carrier', Source, Target #)
::
:: Lesson 9 taught structure DESIGN
:: Lesson 12 teaches structure USE
:: Both are essential for 4CP!
::
:: ====================
:: NEXT STEPS FOR 4CP
:: ====================
::
:: 1. Define planarity (Jordan curve theorem approach or Kuratowski)
:: 2. Define k-colorability
:: 3. Prove auxiliary lemmas about planar graphs
:: 4. Build toward main theorem
:: 5. Integrate with Kempe chains / Discharge method
::
:: YOU NOW HAVE ALL THE TOOLS:
:: - Mizar syntax (Lessons 1-5)
:: - Type system (Lessons 6-7)
:: - Advanced patterns (Lessons 8-11)
:: - MML integration (THIS LESSON)
::
:: The curriculum is complete. 4CP formalization begins!
::>
::> 106: Unknown attribute
::> 115: Unknown attribute
::> 140: Unknown variable
::> 306: Attribute symbol expected
