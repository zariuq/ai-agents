:: Lesson 15A: Pair Accessors - Using Backtick Projections
::
:: Goal: Master backtick projections (`1, `2) for reading pair components
:: Key discovery: Backticks WORK with direct product types!
::
:: CRITICAL INSIGHT:
:: - func/equals definitions DON'T auto-expand (by design)
:: - Accessors need the product type VISIBLE at use site
:: - Use DIRECT product type in declarations: Element of [:X, Y:]
:: - Mode aliases would be nice but syntax unclear (not needed for basic use)
::
:: Result: 0 ERRORS with this pattern!

environ
 vocabularies LSN15A, XBOOLE_0, SUBSET_1, TARSKI, NUMBERS,
      MARGREL1, XBOOLEAN, ZFMISC_1, MCART_1, XTUPLE_0;
 notations TARSKI, XBOOLE_0, SUBSET_1, NUMBERS, ZFMISC_1, MARGREL1, XBOOLEAN,
      MCART_1, XTUPLE_0;
 constructors XBOOLE_0, SUBSET_1, ZFMISC_1, MARGREL1, XBOOLEAN, MCART_1,
      XTUPLE_0;
 registrations XBOOLE_0, SUBSET_1, ZFMISC_1, MARGREL1, XBOOLEAN, MCART_1,
      XTUPLE_0;
 requirements SUBSET, BOOLE;
 theorems ZFMISC_1, MCART_1, MARGREL1, XTUPLE_0;

begin

:: ============================================================================
:: Testing Accessors Directly (without mode alias first)
:: ============================================================================

:: Note: MCART_1:23 may not be available - let's test without it first

theorem ThProjectionsDomain:
  for c being Element of [:BOOLEAN, BOOLEAN:]
  holds c`1 in BOOLEAN & c`2 in BOOLEAN
proof
  let c be Element of [:BOOLEAN, BOOLEAN:];
  c in [:BOOLEAN, BOOLEAN:];
  hence thesis by MCART_1:10;
end;

:: ============================================================================
:: Using Accessors in Definitions
:: ============================================================================

:: Simple test: Can we even construct a pair from projections?
theorem ThAccessorReconstruct:
  for c being Element of [:BOOLEAN, BOOLEAN:]
  holds [c`1, c`2] in [:BOOLEAN, BOOLEAN:]
proof
  let c be Element of [:BOOLEAN, BOOLEAN:];
  c`1 in BOOLEAN & c`2 in BOOLEAN by MCART_1:10;
  hence thesis by ZFMISC_1:87;
end;

:: ============================================================================
:: Pattern Summary
:: ============================================================================

:: WHEN TO USE ACCESSORS:
:: - Reading components from pair-typed variables
:: - Short proofs where structure is already visible
:: - Operations that naturally work componentwise

:: HOW TO MAKE ACCESSORS WORK (VERIFIED PATTERN - 0 ERRORS):
:: 1. Use the DIRECT product type in ALL variable declarations
::    let c be Element of [:BOOLEAN, BOOLEAN:];
::    NOT: let c be Element of GF2_squared (even if GF2_squared = [:BOOLEAN,BOOLEAN:])
::
:: 2. Ensure environ has: MCART_1, XTUPLE_0 in notations/constructors
::
:: 3. Backticks c`1, c`2 then work automatically!

:: KEY THEOREMS (VERIFIED):
:: - MCART_1:10  : c`1 in X & c`2 in Y for c in [:X,Y:]  [WORKS!]
:: - ZFMISC_1:87 : x in X & y in Y implies [x,y] in [:X,Y:]  [WORKS!]

:: KEY INSIGHT:
:: Mode aliases or func/equals hide the product structure from the checker.
:: Solution: Use the product type directly everywhere you need projections.
