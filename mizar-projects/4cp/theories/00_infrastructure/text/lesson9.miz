::Lesson 9: Structures with Selectors - REALISTIC GRAPH THEORY
::
:: Goal: Build realistic graph structures suitable for 4-Color Theorem
:: Key: Multi-field structures with functions between fields
::
:: WHY THIS MATTERS FOR 4CP:
:: - Graphs need vertices, edges, AND incidence relations
:: - Graph operations preserve structure
:: - Properties propagate through selectors

environ
 vocabularies LESSON9, XBOOLE_0, SUBSET_1, STRUCT_0, ZFMISC_1, FUNCT_1,
      RELAT_1;
 notations XBOOLE_0, SUBSET_1, STRUCT_0, ZFMISC_1, FUNCT_1, RELAT_1,
      FUNCT_2;
 constructors XBOOLE_0, SUBSET_1, STRUCT_0, ZFMISC_1, FUNCT_1, FUNCT_2;
 registrations XBOOLE_0, SUBSET_1, STRUCT_0, ZFMISC_1, FUNCT_1, RELAT_1;

begin

:: ====================
:: REALISTIC GRAPH STRUCTURE
:: ====================
:: Pattern from MML's GRAPH_1: vertices + edges + incidence
:: This is what 4CP formalization actually needs!

definition
  struct IncidenceGraph
::>     *304
  (# vertices -> set,
     edges -> set,
     incidence -> Relation of the edges, the vertices #);
end;

:: MODES: Type aliases for graph elements

definition
  let G be IncidenceGraph;
::>                      *306
  mode Vertex of G is Element of the vertices of G;
::>  *73    *303
  mode Edge of G is Element of the edges of G;
::>  *73  *303
end;

:: SELECTORS: Access components cleanly

definition
  let G be IncidenceGraph;
::>                      *306
  func Vertices(G) -> set equals
::>           *140,142,302
  the vertices of G;
  coherence;
::>       *72

  func Edges(G) -> set equals
::>        *140,142,302
  the edges of G;
  coherence;
::>       *72

  func Incidence(G) -> Relation of the edges of G, the vertices of G equals
::>            *140,142,302
  the incidence of G;
  coherence;
::>       *72
end;

:: ATTRIBUTES: Graph properties based on structure

definition
  let G be IncidenceGraph;
::>                      *306
  attr G is vertex-empty means
::>              *140,142,203
  :Def4:
  the vertices of G is empty;

  attr G is edge-empty means
::>            *140,142,203
  :Def5:
  the edges of G is empty;

  attr G is simple means
::>              *140,142,306
  :Def6:
  the vertices of G <> {} & the edges of G <> {};
end;

:: REGISTRATION: Prove empty graph exists

registration
  cluster strict vertex-empty edge-empty for IncidenceGraph;
::>                   *140,203
  existence
  proof
    set R = {} the Relation of {}, {};
::>                          *183
    take G = IncidenceGraph(#{}, {}, R#);
::>                       *140,330
    thus G is strict;
    thus the vertices of G is empty;
::>                    *306
    thus the edges of G is empty;
::>                 *306
  end;
end;

:: REGISTRATION: Simple graphs exist

registration
  cluster strict simple for IncidenceGraph;
::>                   *140*306
  existence
  proof
    set V = {0};
::>          *140,152
    set E = {1};
::>           *152
    set R = {} the Relation of E, V;
::>                          *183
    take G = IncidenceGraph(#V, E, R#);
::>                       *140,330
    thus G is strict;
    thus the vertices of G <> {} & the edges of G <> {} by Def6;
::>                    *306
  end;
end;

:: THEOREM: Field equality implies structure equality

theorem Th1:
  for G1, G2 being IncidenceGraph st
::>                                *306
    the vertices of G1 = the vertices of G2 &
    the edges of G1 = the edges of G2 &
    the incidence of G1 = the incidence of G2
  holds G1 = G2
proof
  let G1, G2 be IncidenceGraph;
::>                           *306
  assume the vertices of G1 = the vertices of G2 &
::>                    *306
         the edges of G1 = the edges of G2 &
         the incidence of G1 = the incidence of G2;
  thus G1 = G2;
end;

:: THEOREM: Properties via attributes

theorem Th2:
  for G being IncidenceGraph st G is simple
::>                           *306
  holds Vertices(G) <> {} & Edges(G) <> {}
proof
  let G be IncidenceGraph;
::>                      *306
  assume G is simple;
::>                *140,306
  then the vertices of G <> {} & the edges of G <> {} by Def6;
::>                  *306
  hence Vertices(G) <> {} & Edges(G) <> {};
::>            *148             *148
end;

:: THEOREM: Conditional properties

theorem Th3:
  for G being IncidenceGraph st G is vertex-empty
::>                           *306
  holds Vertices(G) = {}
proof
  let G be IncidenceGraph;
::>                      *306
  assume G is vertex-empty;
::>                *140,203
  then the vertices of G is empty by Def4;
::>                  *306
  hence Vertices(G) = {};
::>            *148
end;

:: ====================
:: KEY LESSONS FOR 4CP
:: ====================
::
:: 1. MULTI-FIELD STRUCTURES: Not just sets, but sets + relations
::    - vertices and edges are separate
::    - incidence relates them
::
:: 2. MODES: Type aliases make code readable
::    - `Vertex of G` instead of `Element of the vertices of G`
::    - `Edge of G` instead of `Element of the edges of G`
::
:: 3. SELECTORS: Functional access to fields
::    - `Vertices(G)` is cleaner than `the vertices of G`
::    - Enables composition: `card Vertices(G)`
::
:: 4. ATTRIBUTES: Semantic properties
::    - `simple` means non-empty vertices and edges
::    - `vertex-empty` is explicit emptiness
::
:: 5. REGISTRATIONS: Prove instances exist!
::    - Empty graphs exist
::    - Simple graphs exist
::    - Type system now knows these are valid
::
:: ====================
:: COMPARISON TO MML GRAPH_1
:: ====================
::
:: This lesson uses:
::   IncidenceGraph(# vertices, edges, incidence #)
::
:: MML GRAPH_1 uses:
::   MultiGraphStruct(# carrier, carrier', Source, Target #)
::   where Source, Target are Functions (not just Relations)
::
:: MML is more sophisticated:
::   - Source, Target are FUNCTIONS (deterministic)
::   - Supports directed graphs natively
::   - Has dom/cod functors for edge endpoints
::
:: This lesson is pedagogical:
::   - Uses Relation (simpler than Function)
::   - Shows the structure pattern
::   - Prepares for Lesson 12 (actual GRAPH_1 usage)
::
:: ====================
:: NEXT: Lesson 12
:: ====================
:: Lesson 12 will import actual GRAPH_1 from MML and prove
:: real theorems using MultiGraphStruct, dom, cod, etc.
:: This is where 4CP formalization truly begins!
::>
::> 72: Unexpected correctness condition
::> 73: Correctness condition missing
::> 140: Unknown variable
::> 142: Unknown locus
::> 148: Unknown private functor
::> 152: Unknown functor format
::> 183: Accessible mode format has empty list of arguments
::> 203: Unknown token, maybe an illegal character used in an identifier
::> 302: Functor symbol expected
::> 303: Mode symbol expected
::> 304: Structure symbol expected
::> 306: Attribute symbol expected
::> 330: Unexpected end of an item (perhaps ";" missing)
